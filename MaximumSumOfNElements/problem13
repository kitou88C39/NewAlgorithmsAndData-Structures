import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n, k;
        n = sc.nextInt();
        k = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        // ここにコードを書く

        // 現在の右端を表す変数 r
        int r = 0;
        // 現在の総和を表す変数 sum (long型にしてオーバーフローを防ぐ)
        long currentSum = 0;
        // 答えを表す変数 count (long型にしてオーバーフローを防ぐ)
        long count = 0;
        
        // 左端 l を 0 から n - 1 まで繰り返す
        for (int l = 0; l < n; l++) {
            // 右端 r を進めてウィンドウを拡張
            // r が配列の範囲内であり、かつ現在の合計に a[r] を加えても k 未満である間、r を進める
            while (r < n && currentSum + a[r] < k) { // 条件は「k 未満」なので < を使う
                currentSum += a[r]; // sum に a[r] を加える
                r++;                // 右端 r を 1 ずつ増やす
            }
            
            // 現在の l で始まる有効な部分配列の数を数える
            // ウィンドウ [l, r-1] は l で始まる最長の部分配列
            // この範囲に含まれる部分配列の数は (r - l) 個
            count += (r - l); 

            // 次のループ (l が右に移動する) のための準備
            // もし左端 l が右端 r と同じ位置にある場合 (例えば、kが非常に小さく r が全く動かなかった場合)
            // r を 1 つ進める。これにより l が進んでも r が l より遅れることを防ぐ
            if (l == r) {
                r++;
            }
            // そうでなければ (l < r の場合)
            // 左端 l がウィンドウから外れるので、sum から a[l] を引く
            else {
                currentSum -= a[l];
            }
        }
        
        // 最終的な有効な部分配列の個数を出力
        System.out.println(count);

        sc.close(); // Scannerを閉じる
    }
}