import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n, k;
        n = sc.nextInt();
        k = sc.nextInt();

        int[] a = new int[n];

        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        // 現在の右端を表す変数 r
        // 現在の総和を表す変数 sum (合計値が大きくなる可能性があるので long を使用)
        // 答えを表す変数 count (部分配列の数が多くなる可能性があるので long を使用)
        int r = 0;
        long sum = 0;
        long count = 0;
        
        // 左端 l を 0 から n - 1 まで繰り返す
        for (int l = 0; l < n; l++) { // ★修正点: for ループのヘッダーに `l++` を追加しました
                                      // ★そして、このループの本体を `{}` で囲みます
            // r が n より小さく、sum に a[r] を加えても k を超えない間
            // 右端 r を移動させ、ウィンドウを拡張
            while (r < n && sum + a[r] <= k) {
                sum += a[r]; // sum に a[r] を加えて
                r++;         // 右端 r を 1 ずつ増やす
            }
            
            // 現在の l で始まる有効な部分配列の数を数える
            // ウィンドウ [l, r-1] が l で始まる最長の部分配列
            // この範囲内の部分配列の数は (r - l) 個
            count += (r - l); 

            // 次のループ (l が 1 つ右に移動する前) の準備
            // もし左端 l が右端 r と同じなら、ウィンドウが空になるため r も 1 つ進める
            if (l == r) {
                r++;
            }
            // そうでなければ (l < r の場合)
            // 左端 l がウィンドウから出るので、sum から a[l] を引く
            else {
                sum -= a[l];
            }
        }
        
        // 最終的な部分配列の総数を表示
        System.out.println(count);
        sc.close(); // Scanner を閉じる
    }
}