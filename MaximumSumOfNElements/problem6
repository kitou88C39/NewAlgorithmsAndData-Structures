import java.util.Scanner;

public class Main {

    static void print2DArray(int[][] a) {
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[0].length; j++) {
                if (j != 0) {
                    System.out.print(" ");
                }
                System.out.print(a[i][j]);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n, m;
        n = sc.nextInt();
        m = sc.nextInt();
        int[][] a = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        // ここにコードを書く

        // 累積和を格納する二次元配列 s を n+1 x m+1 のサイズで初期化
        // Javaではint配列はデフォルトで0で初期化されるため、明示的な0初期化は不要
        int[][] s = new int[n + 1][m + 1];

        // 累積和を計算
        // s[i][j] は元の配列 a の a[0][0] から a[i-1][j-1] までの長方形領域の和を表す
        for (int i = 0; i < n; i++) { // i は元の配列 a の行インデックス
            for (int j = 0; j < m; j++) { // j は元の配列 a の列インデックス
                // 累積和の公式を適用
                // s[行インデックス+1][列インデックス+1] = ... + a[行インデックス][列インデックス]
                s[i+1][j+1] = s[i+1][j] + s[i][j+1] - s[i][j] + a[i][j];
            }
        }

        // 計算した二次元累積和配列 s を出力
        print2DArray(s);

        sc.close(); // Scannerを閉じる
    }
}