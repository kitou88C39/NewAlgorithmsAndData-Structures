import java.util.Scanner;

public class Main {

    static void printArray(int[] a, int n) {
        for (int i = 0; i < n; i++) {
            if (i != 0) {
                System.out.print(" ");
            }
            System.out.print(a[i]);
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n, q;
        n = sc.nextInt();
        q = sc.nextInt();

        // ここにコードを書く (1. 差分配列の初期化)
        // 差分を記録するための配列。サイズは n+1 とする（r+1 の処理のため）
        int[] diff = new int[n + 1]; // Javaはデフォルトで0で初期化される

        for (int i = 0; i < q; i++) {
            int l, r, x;
            l = sc.nextInt();
            r = sc.nextInt();
            x = sc.nextInt();

            // ここにコードを書く (2. 各クエリの差分配列への適用)
            // 区間の開始位置 l に x を加算
            diff[l] += x;
            // 区間の終了位置 r の次 (r+1) に x を減算して、加算の影響を打ち消す
            // r+1 が配列の範囲内かチェック (n+1のサイズなので diff[n] までアクセス可能)
            if (r + 1 < n + 1) { // diff[r+1] が diff配列の範囲内にあるか確認
                diff[r + 1] -= x;
            }
            // else if (r + 1 == n + 1) は、配列の最後まで影響があるので何もしなくてよい
            // r+1がnより大きい場合はdiff[r+1]にアクセスしない（不要）
            // この問題の制約でr+1が常にn+1を超えない場合、if文は不要な場合もある
            // 問題文のl,rの範囲とnの関係によるが、diff[n]（つまりサイズn+1の最後の要素）に
            // 書き込む可能性があるので、r+1 <= n である必要がある。
            // r <= n-1 なので、r+1 <= n となり、diff[n]までしかアクセスしない。
            // したがって、r+1 < n+1 は常に真（または r+1 == n+1 の時）
            // if (r + 1 < diff.length) の方がより汎用的なチェック
        }

        // ここにコードを書く (3. 差分配列から元の配列を復元)
        // 最終的な配列 a を格納
        int[] finalArrayA = new int[n];

        // 最初の要素は差分配列の最初の要素
        finalArrayA[0] = diff[0];
        // 累積和を計算して配列の各要素を復元
        for (int i = 1; i < n; i++) {
            finalArrayA[i] = finalArrayA[i-1] + diff[i];
        }

        // 最終的な配列 a を出力
        printArray(finalArrayA, n);

        sc.close(); // Scannerを閉じる
    }
}