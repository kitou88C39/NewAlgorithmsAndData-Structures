import java.util.Arrays;

public class Main {
    static boolean[] eratosthenes(int n) {
        boolean isPrime[] = new boolean[n + 1];
        Arrays.fill(isPrime, true); // 最初はすべて素数だと仮定
        isPrime[0] = isPrime[1] = false; // 0と1は素数ではない

        // i を 2 から n までループ
        for (int i = 2; i <= n; i++) {
            // もし isPrime[i] が false なら、i はすでに合成数と判明しているのでスキップ
            if (!isPrime[i]){
                continue;
            }
            
            // i が素数である場合、i の倍数をすべて非素数とマークする
            // j は i の倍数を表す。i * i から始めることで効率化される
            // (i * k で k < i の場合は、k でマーク済みのため)
            for (int j = i * i; j <= n; j += i) { // ★修正点: ここを完成させる
                isPrime[j] = false; // i の倍数は素数ではない
            }
        }
        return isPrime;
    }

    public static void main(String[] args) {
        // eratosthenes関数を使って1から1000までの素数を判定
        boolean[] isPrime = eratosthenes(1000);
        
        // 結果の出力
        for(int i = 1; i <= 1000; i++){
            System.out.print(i + " : ");
            if(isPrime[i]){
                System.out.println("prime");
            }else{
                System.out.println("not prime");
            }
        }
    }
}