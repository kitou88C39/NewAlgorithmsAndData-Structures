import java.util.Scanner;

public class Main {

    static int count = 0; // スワップ回数をカウントするグローバル変数（または比較回数）

    // クイックソートのパーティション処理
    // この実装はLomutoパーティションスキームに近いです
    static int partition(int[] a, int left, int right) {
        int pivot = a[right - 1]; // ピボットを最も右の要素に設定
        int i = left; // i は 'pivot' より小さい要素の境界を追跡

        // left から right-2 までの要素を走査
        for (int j = left; j < right - 1; j++) {
            // 現在の要素 a[j] がピボットより小さい場合
            if (a[j] <= pivot) { // 小さいか等しい場合、左側に移動
                // a[i] と a[j] を交換
                int temp = a[i];
                a[i] = a[j];
                a[j] = temp;
                count++; // スワップ（または比較）の回数をカウント
                i++; // 'pivot' より小さい要素の境界を右に移動
            }
        }
        // ピボットを最終的な正しい位置 (a[i]) に配置
        int temp = a[i];
        a[i] = a[right - 1];
        a[right - 1] = temp;
        count++; // ピボットのスワップもカウント

        return i; // ピボットの最終的な位置を返す
    }

    // クイックソートの再帰的な処理
    static void quickSort(int[] a, int left, int right) {
        // 部分配列の要素が1つ以下ならソート済み
        if (left >= right - 1) { // right は排他的な終端インデックス
            return;
        }

        // 配列を分割し、ピボットの最終的な位置を取得
        int pivotIndex = partition(a, left, right);

        // ピボットの左側の部分配列をソート
        quickSort(a, left, pivotIndex);
        // ピボットの右側の部分配列をソート
        quickSort(a, pivotIndex + 1, right);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        // クイックソートを開始 (配列全体: 0 から n まで (n は含まず))
        quickSort(a, 0, n);

        // ソート後の配列を出力
        for (int i = 0; i < n; i++) {
            if (i > 0) {
                System.out.print(" ");
            }
            System.out.print(a[i]);
        }
        System.out.println(); // ソートされた配列の後に改行

        // スワップ回数を出力
        System.out.println(count);

        sc.close(); // Scannerのリソースを解放
    }
}