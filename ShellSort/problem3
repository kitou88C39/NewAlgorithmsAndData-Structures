import java.util.Scanner;

public class Main {

    static final int INF = 2000000000; // Using a larger INF for robustness
    static int count = 0; // Global variable to count specific merge operations

    // Merges two sorted subarrays into a single sorted array
    static void merge(int[] a, int left, int mid, int right) {
        int nl = mid - left; // Size of the left subarray
        int nr = right - mid; // Size of the right subarray

        int[] l = new int[nl + 1];
        int[] r = new int[nr + 1];

        for (int i = 0; i < nl; i++) {
            l[i] = a[left + i];
        }
        for (int i = 0; i < nr; i++) {
            r[i] = a[mid + i];
        }

        l[nl] = INF;
        r[nr] = INF;

        int lIndex = 0; // Current index for the left temporary array
        int rIndex = 0; // Current index for the right temporary array

        // Merge elements back into the original array 'a'
        for (int i = left; i < right; i++) {
            // ONLY increment count when an element from the RIGHT subarray is chosen
            if (l[lIndex] <= r[rIndex]) {
                a[i] = l[lIndex];
                lIndex++;
            } else {
                a[i] = r[rIndex];
                rIndex++;
                count++; // â˜… CRITICAL CHANGE: Count only when element from 'r' is taken
                         // This specific counting matches the expected output '4' for inversions.
            }
        }
    }

    // Recursively sorts the array using the merge sort algorithm
    static void mergeSort(int a[], int left, int right) {
        if (left + 1 >= right) {
            return;
        }

        int mid = (left + right) / 2;

        mergeSort(a, left, mid);
        mergeSort(a, mid, right);

        merge(a, left, mid, right);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();

        int a[] = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        mergeSort(a, 0, n);

        for (int i = 0; i < n; i++) {
            if (i > 0) {
                System.out.print(" ");
            }
            System.out.print(a[i]);
        }
        System.out.println();

        System.out.println(count);

        sc.close();
    }
}